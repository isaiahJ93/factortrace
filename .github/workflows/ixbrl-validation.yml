# --------------------------------------------------------------------
#  CI/CD PIPELINE — iXBRL Voucher Validation + Nightly Taxonomy Check
#  Works on GitHub-hosted ubuntu-latest runners
# --------------------------------------------------------------------
name: iXBRL Compliance Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate-ixbrl:
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: "3.11"
      ESRS_VERSION: "2023-12-22"
      ESRS_ZIP_URL: "https://xbrl.efrag.org/taxonomy/esrs/2023-12-22/ESRS_Set1_Taxonomy.zip"
      ESRS_XSD_URL: "https://xbrl.efrag.org/taxonomy/esrs/2023-12-22/esrs_all.xsd"

    steps:
    # ────────────────────────────── git + python ───────────────────────────────
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
        restore-keys: pip-${{ runner.os }}-

    - name: Install deps (incl. Arelle & xml utils)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || true
        pip install pytest pydantic fastapi xmlschema  # fallback in case requirements.txt is incomplete
        pip install --upgrade arelle-release
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends libxml2-utils xmlstarlet

    # ──────────────────── taxonomy download (fail-loud)  ──────────────────────
    - name: Download & unpack ESRS taxonomy
      id: esrs
      shell: bash
      run: |
        set -Eeuo pipefail
        WORK="$RUNNER_TEMP/esrs-taxonomy"
        mkdir -p "$WORK"
        echo "::group::Fetching ESRS taxonomy ($ESRS_VERSION)"
        if ! curl -fSL --retry 5 --retry-delay 4 -o "$WORK/esrs.zip" "$ESRS_ZIP_URL"; then
          echo "ZIP fetch failed – trying direct XSD"
          curl -fSL --retry 5 --retry-delay 4 -o "$WORK/esrs_all.xsd" "$ESRS_XSD_URL"
        fi
        echo "::endgroup::"

        if [[ -f "$WORK/esrs.zip" ]]; then
          echo "Unzipping…"
          unzip -q "$WORK/esrs.zip" -d "$WORK"
        fi

        test -f "$WORK/esrs_all.xsd" || { echo "❌ No entry-point XSD"; exit 88; }
        echo "taxdir=$WORK" >> "$GITHUB_OUTPUT"

    # ─────────────────── cache taxonomy + arelle stores  ──────────────────────
    - name: Cache Arelle & Taxonomies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/arelle
          ${{ steps.esrs.outputs.taxdir }}
        key: arelle-${{ runner.os }}-${{ env.ESRS_VERSION }}

    # ───────────────────────────── project checks ─────────────────────────────
    - name: Run Unit Tests
      run: pytest -q

    - name: Generate Sample Reports
      run: |
        python src/generate_test_reports.py
        ls -la output/*.xhtml

    - name: XML Well-formedness
      run: |
        for f in output/*.xhtml; do
          xmllint --noout "$f"
        done

    - name: XHTML 1.1 DTD Validation
      run: |
        for f in output/*.xhtml; do
          xmllint --noout --dtdvalid http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd "$f"
        done

    - name: iXBRL Structure Validation
      run: python scripts/validate_ixbrl_structure.py output/*.xhtml

    - name: Arelle XBRL Validation
      env:
        ARELLE_HOME: ~/.cache/arelle
      run: |
        for f in output/*.xhtml; do
          arelleCmdLine --file "$f" \
                        --validate \
                        --disclosureSystem esrs \
                        --formula --plugins inlineXbrlDocumentSet \
                        --taxonomyPackage "${{ steps.esrs.outputs.taxdir }}" \
                        --logFile "${f}.log" --logLevel warning
          grep -q "ERROR" "${f}.log" && { cat "${f}.log"; exit 1; }
        done

    - name: Extra Domain-specific Checks
      run: |
        python scripts/validate_numeric_precision.py output/*.xhtml
        python scripts/validate_cbam_compliance.py output/*.xhtml
        python scripts/calculate_esrs_coverage.py output/*.xhtml > coverage_report.txt

    - name: Security Scan
      run: |
        grep -r "autoescape=False" templates/ && echo "⚠️  autoescape disabled" || true
        grep -r -i "password\|secret\|key" output/*.xhtml && echo "⚠️  possible secret" || true

    - name: Performance Test
      run: python scripts/performance_test.py

    # ───────────────────── upload artefacts + codecov  ────────────────────────
    - name: Upload Validation Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-reports
        path: |
          output/*.xhtml
          output/*.log
          coverage_report.txt

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests

    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const cov = fs.readFileSync('coverage_report.txt','utf8');
          github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body: `### ✅ iXBRL validation passed\n\n\`\`\`\n${cov}\n\`\`\``
          });

# --------------------------------------------------------------------
# 2️⃣  Nightly job that simply watches for taxonomy changes
# --------------------------------------------------------------------
  nightly-taxonomy-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Check for EFRAG taxonomy updates
      run: |
        curl -fsSL -o new_checksums.txt \
          https://xbrl.efrag.org/taxonomy/2025/checksums.txt
        if test -f taxonomies/checksums.txt && diff -q taxonomies/checksums.txt new_checksums.txt; then
          echo "✅ Taxonomies up to date"
        else
          echo "⚠️  New taxonomy detected – opening issue"
          gh issue create --title "Update ESRS taxonomy" \
                          --body "New checksum set detected in nightly job." || true
        fi

